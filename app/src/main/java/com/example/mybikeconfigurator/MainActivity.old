package com.example.mybikeconfigurator

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.SwitchCompat
import com.example.mybikeconfigurator.ble.BLEWrapper


class MainActivity : AppCompatActivity() {
    private var bleDevices = arrayOf("not selected","dev1","dev2")

    private var bluetooth: BLEWrapper = BLEWrapper()

    private val TAG = "MainActivity"


    override fun onDestroy() {
        Log.d(TAG, "onDestroy()")
        super.onDestroy()
        bluetooth.destroy()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        Log.d(TAG, "Starting")

        bluetooth.init(this)
        bluetooth.onCallback = ::enableElements
        bluetooth.offCallback = ::disableElements


        // initiate a Switch
        val simpleSwitch = findViewById<View>(R.id.enable_ble) as SwitchCompat

        // check BLE permission
        if(!bluetooth.blePermission) {
            Toast.makeText(
                this,
                getString(R.string.permission_ble_not_given),
                Toast.LENGTH_LONG
            ).show()
            val intent = Intent()
            intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
            val uri: Uri = Uri.fromParts("package", packageName, null) //open this package
            intent.data = uri //send this app package as an argument to settings intent
            startActivity(intent) //start settings activity
        }

        if (!bluetooth.bleActivated || !bluetooth.blePermission) { //if permissions are not enabled start app settings activity
            disableElements()
        }
        simpleSwitch.isChecked = bluetooth.bleActivated


        // init spinner
        val spinner = findViewById<Spinner>(R.id.spinner_bike_select)
        if (spinner != null) {
            val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, bleDevices)
            spinner.adapter = adapter

            spinner.onItemSelectedListener = object :
                AdapterView.OnItemSelectedListener {
                override fun onItemSelected(parent: AdapterView<*>,
                                            view: View, position: Int, id: Long) {
                    Toast.makeText(this@MainActivity,
                        getString(R.string.toast_selected_item) + " " +
                                "" + bleDevices[position], Toast.LENGTH_SHORT).show()
                }

                override fun onNothingSelected(parent: AdapterView<*>) {
                    // write code to perform some action
                    Toast.makeText(this@MainActivity,
                        getString(R.string.toast_selected_item) + " " +
                                "nothing", Toast.LENGTH_SHORT).show()
                }
            }
        }

        // init BLE stack and so on

    }

    fun disableElements() {
        val simpleSwitch = findViewById<View>(R.id.enable_ble) as SwitchCompat
        simpleSwitch.isChecked = bluetooth.bleActivated
        // disable all elements
        val myLayout = findViewById<View>(R.id.linear_layout_main) as LinearLayout
        for (i in 0 until myLayout.childCount) {
            val view = myLayout.getChildAt(i)
            view.isEnabled = false // Or whatever you want to do with the view.
        }
    }

    fun enableElements() {
        val simpleSwitch = findViewById<View>(R.id.enable_ble) as SwitchCompat
        simpleSwitch.isChecked = bluetooth.bleActivated
        // disable all elements
        val myLayout = findViewById<View>(R.id.linear_layout_main) as LinearLayout
        for (i in 0 until myLayout.childCount) {
            val view = myLayout.getChildAt(i)
            view.isEnabled = true // Or whatever you want to do with the view.
        }
    }
}